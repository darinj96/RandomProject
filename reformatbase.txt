
public class RecalculationSql
{
    public static MySqlDataReader SQL_GetLoans(ref eCashDb Db, ref MySqlConnection Cn, int CompanyId, int RegionId, int DistrictId, int StoreId, int hdrId)
    {
        string Sql;
        var Fields = new ArrayList();

        Sql = $@"SELECT th.id, th.store_id, th.status_id, s.store_num, CONCAT(s.addr1, ' ', s.addr2, ' ', s.city, ' ', states.abbrev, ' ', s.zip) AS addr,
            fnPublicLoanId(th.id) AS pub_loan_id, ts.status AS loan_status, c.id AS customer_id, c.first_name, c.last_name, c.middle_name,
            slc.type_name, 
            CASE th.sys_type_id 
                WHEN 1 THEN IFNULL(th.effective_due_date, ta.due_date)  
                WHEN 3 THEN IFNULL(th.effective_due_date, tl.due_date) 
            END AS due_date
            FROM trans_hdr th 
            INNER JOIN store_loan sl ON th.loan_model_id = sl.id 
            INNER JOIN sys_loan_class slc ON sl.loanclass_id = slc.id
            INNER JOIN store s ON th.store_id = s.id 
            INNER JOIN states ON s.state_id = states.id 
            INNER JOIN region d ON s.district_id = d.id 
            INNER JOIN region r ON d.parent_id = r.id 
            INNER JOIN customer c ON th.customer_id = c.id 
            INNER JOIN trans_status ts ON th.status_id = ts.id 
            LEFT JOIN trans_ttl tl ON th.id = tl.hdr_id
            LEFT JOIN trans_adv ta ON th.id = ta.hdr_id
            WHERE th.id = @hdrId;";

        Fields.Add(new MySqlField("@hdrId", MySqlType.Int, 11, hdrId));

        return Db.ExecuteDataReader(ref Cn, Sql, false, Fields);
    }

    public static MySqlDataReader SQL_GetPaidAmts(ref eCashDb Db, ref MySqlConnection Cn, int hdrId)
    {
        string Sql;
        var Fields = new ArrayList();

        Sql = "SELECT * FROM trans_item_paid WHERE hdr_id = @hdrId;";
        Fields.Add(new MySqlField("@hdrId", MySqlType.Int, 11, hdrId));

        return Db.ExecuteDataReader(ref Cn, Sql, false, Fields);
    }

    public static MySqlDataReader SQL_GetAllTrans(eCashDb Db, MySqlConnection Cn, int hdrId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = $@"
            SELECT c.first_name, c.last_name, fnPublicLoanId(ti.hdr_id) AS pub_loan_id, ti.id, ti.type_id, ti.store_id, ti.user_id, ti.hdr_id, ti.bus_date,
                UUID_BinToTxt(ti.batch_id) AS batch_guid, ti.amount - ti.change_due AS total, ti.change_due, ti.payment_method, 
                IFNULL(lps.id, 0) AS pmt_sched_id, ti.hdr_new_sub_status_id, th.bus_date_created as orig_date
            FROM trans_item ti
            LEFT JOIN loan_pmt_sched lps ON ti.id = lps.created_from_ti_id AND lps.hdr_id = @hdrId
            INNER JOIN trans_hdr th ON ti.hdr_id = th.id 
            INNER JOIN customer c ON th.customer_id = c.id
            WHERE ti.hdr_id = @hdrId AND ti.is_void = 0 AND ti.prev_sys_id IS NULL
                AND ti.bus_date > th.bus_date_created
            ORDER BY ti.bus_date, ti.actual_dt ASC, ti.id;";

        Fields.Add(new MySqlField("@hdrId", MySqlType.Int, 11, hdrId));

        return Db.ExecuteDataReader(ref Cn, sql, false, Fields);
    }

    public static void SQL_ResetLoanData(ref eCashDb db, ref MySqlConnection cn, int hdrId, DataTable transDt, int CompanyId, DateTime BusDate)
    {
        if (hdrId < 1)
        {
            return;
        }

        var Fields = new ArrayList();
        Fields.Add(new MySqlField("@hdrId", MySqlType.Int, 11, hdrId));
        Fields.Add(new MySqlField("@BusDate", MySqlType.DateTime, 8, BusDate));

        string sql = $@"
            DELETE trans_item_paid.*
            FROM trans_item, trans_item_paid, trans_hdr
            WHERE trans_hdr.id = trans_item.hdr_id
                AND trans_item.bus_date > trans_hdr.bus_date_created
                AND trans_item.bus_date >= @BusDate
                AND trans_item_paid.trans_id = trans_item.id
                AND trans_item.prev_sys_id IS NULL
                AND trans_item.is_void = 0
                AND trans_item.hdr_id = @hdrId;";

        Console.WriteLine(sql);
        var tpRows = db.ExecuteNonQuery(ref cn, sql, Fields);

        sql = $@"
            DELETE loan_pmt_sched_paid.*
            FROM loan_pmt_sched_paid, trans_item, trans_hdr
            WHERE trans_hdr.id = trans_item.hdr_id
                AND trans_item.bus_date > trans_hdr.bus_date_created
                AND trans_item.bus_date >= @BusDate
                AND loan_pmt_sched_paid.trans_id = trans_item.id
                AND trans_item.prev_sys_id IS NULL
                AND loan_pmt_sched_paid.hdr_id = @hdrId;";
                
        Console.WriteLine(sql);
        var pmtSchedRows = db.ExecuteNonQuery(ref cn, sql, Fields);

        sql = $@"
            DELETE trans_due_date.*
            FROM trans_due_date, trans_item, trans_hdr
            WHERE trans_hdr.id = trans_item.hdr_id
                AND trans_item.bus_date > trans_hdr.bus_date_created
                AND trans_item.bus_date >= @BusDate
                AND trans_due_date.trans_id = trans_item.id
                AND trans_item.prev_sys_id IS NULL
                AND trans_due_date.hdr_id = @hdrId;";
                
        Console.WriteLine(sql);
        var transDueRows = db.ExecuteNonQuery(ref cn, sql, Fields);

        sql = $@"
            DELETE loan_pmt_sched.*
            FROM loan_pmt_sched, trans_item, trans_hdr
            WHERE trans_hdr.id = trans_item.hdr_id
                AND trans_item.bus_date > trans_hdr.bus_date_created
                AND trans_item.bus_date >= @BusDate
                AND loan_pmt_sched.created_from_ti_id = trans_item.id
                AND trans_item.prev_sys_id IS NULL
                AND loan_pmt_sched.hdr_id = @hdrId;";
                
        Console.WriteLine(sql);
        var morepmtSchedRows = db.ExecuteNonQuery(ref cn, sql, Fields);

        sql = $@"
            UPDATE loan_pmt_sched, trans_item, trans_hdr
            SET loan_pmt_sched.paid_date = NULL, loan_pmt_sched.paid_ti_id = 0
            WHERE trans_hdr.id = trans_item.hdr_id
                AND trans_item.bus_date > trans_hdr.bus_date_created
                AND trans_item.bus_date >= @BusDate
                AND loan_pmt_sched.paid_ti_id = trans_item.id
                AND trans_item.prev_sys_id IS NULL
                AND loan_pmt_sched.hdr_id = @hdrId;";
                
        Console.WriteLine(sql);
        var updates1 = db.ExecuteNonQuery(ref cn, sql, Fields);

        sql = $@"
            DELETE trans_item.*
            FROM trans_item, trans_hdr
            WHERE trans_hdr.id = trans_item.hdr_id
                AND trans_item.bus_date > trans_hdr.bus_date_created
                AND trans_item.bus_date >= @BusDate
                AND trans_item.prev_sys_id IS NULL
                AND trans_item.is_void = 0
                AND hdr_id = @hdrId;";
                
        Console.WriteLine(sql);
        var tiRows = db.ExecuteNonQuery(ref cn, sql, Fields);

        string totalWhatHappened = $@"Ti Rows: {tiRows} Updates: {updates1} more: {morepmtSchedRows} TP Rows: {tpRows} Pmt Sched Rows : {pmtSchedRows}  Trans Due Rows : {transDueRows}";
        Console.WriteLine(totalWhatHappened);

        // Reset due date, status, and suspend interest flag
        sql = $"SELECT MAX(id) FROM trans_item WHERE is_void = 0 AND hdr_id = @hdrId;";
        Fields.Clear();
        Fields.Add(new MySqlField("@hdrId", MySqlType.Int, 11, hdrId));
        int lastTiId = DataConnection_SafeScalar.ConvertTo<int>(db.ExecuteScalar(ref cn, sql, Fields));
        DateTime dueDate = DataConnection_SafeScalar.ConvertTo<DateTime>(db.ExecuteScalar(ref cn, $"SELECT new_due_date FROM trans_due_date WHERE hdr_id = @hdrId AND trans_id <= {lastTiId} ORDER BY id DESC LIMIT 1;", Fields));
        int statusId = DataConnection_SafeScalar.ConvertTo<int>(db.ExecuteScalar(ref cn, $"SELECT hdr_new_status_id FROM trans_item WHERE id = {lastTiId};", Fields));
        int subStatusId = DataConnection_SafeScalar.ConvertTo<int>(db.ExecuteScalar(ref cn, $"SELECT hdr_new_sub_status_id FROM trans_item WHERE id = {lastTiId};", Fields));

        sql = $@"
            UPDATE trans_ttl t, trans_hdr th 
            SET th.effective_due_date = '{dueDate:yyyy-MM-dd}',
                t.is_deleted = 0,
                t.delete_bus_date = NULL,
                t.delete_actual_dt = NULL,
                t.delete_user_id = 0,
                t.po_date = '0000-00-00',
                t.co_date = '0000-00-00',
                th.status_id = {statusId},          
                th.sub_status_id = {subStatusId}
            WHERE t.hdr_id = th.id
            AND th.id = @hdrId;";
            
        db.ExecuteNonQuery(ref cn, sql, Fields);
    }

    public static void SQL_ResetTheChargeDate(ref eCashDb db, ref MySqlConnection cn, int HdrId, DateTime BusDate)
    {
        string sql;
        var Fields = new ArrayList();

        sql = $@"
            UPDATE loan_fee lf
            JOIN (
               SELECT tip.paid_lf_id AS loan_fee_id, ti.bus_date, ti.hdr_id
               FROM trans_item_paid tip
               INNER JOIN trans_item ti ON ti.id = tip.trans_id
               INNER JOIN trans_item_type it ON it.id = ti.type_id
               WHERE tip.hdr_id = @HdrId
               AND ti.is_void <> 1
               AND ti.type_id = 32
               AND ti.bus_date < @BusDate
               LIMIT 1
            ) AS derived ON
            lf.id = derived.loan_fee_id AND lf.hdr_id = derived.hdr_id
            SET lf.last_charge_date = derived.bus_date,
               lf.last_earn_date = derived.bus_date;";

        Fields.Add(new MySqlField("@HdrId", MySqlType.Int, 11, HdrId));
        Fields.Add(new MySqlField("@BusDate", MySqlType.DateTime, 8, BusDate));

        db.ExecuteNonQuery(cn, sql, false, Fields);
    }

    public static void SQL_UpdateCreditLimitLog(ref eCashDb db, ref MySqlConnection cn, int oldTransId, decimal newTransId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "UPDATE loan_creditlimit_log SET trans_id = @newTransId WHERE trans_id = @oldTransId;";
        Fields.Add(new MySqlField("@oldTransId", MySqlType.Int, 11, oldTransId));
        Fields.Add(new MySqlField("@newTransId", MySqlType.Decimal, 23, newTransId));

        db.ExecuteNonQuery(cn, sql, false, Fields);
    }

    public static int SQL_GetSuspendIntFlag(ref eCashDb Db, ref MySqlConnection Cn, int hdrId)
    {
        string Sql;
        var Fields = new ArrayList();

        Sql = "SELECT suspend_interest FROM trans_hdr WHERE id = @hdrId;";
        Fields.Add(new MySqlField("@hdrId", MySqlType.Int, 11, hdrId));

        return DataConnection_SafeScalar.ConvertTo<int>(Db.ExecuteScalar(ref Cn, Sql, Fields));
    }

    public static void FixRefundPaidEntries(ref eCashDb db, ref MySqlConnection cn, int transId, DataRow pmtDr, DataTable paidDt, int companyId)
    {
        var Params = new ArrayList();

        // If more than one entry, get the positive one
        DataRow[] amtDr = paidDt.Select($"trans_id={pmtDr.SafeInteger("id")} AND paid_amt > 0");
        if (amtDr.Length == 0)
        {
            // If none found look for a negative one
            amtDr = paidDt.Select($"trans_id={pmtDr.SafeInteger("id")} AND paid_amt < 0");
        }

        foreach (DataRow paidDr in amtDr)
        {
            int paidTypeId = paidDr.SafeInteger("paid_type_id").Value;
            if (paidTypeId == 29)
                paidTypeId = 51;

            decimal paidAmt = paidDr.SafeDecimal("paid_amt").Value;
            if (paidAmt < 0m)
                paidAmt = decimal.Negate(paidAmt);

            string pSql = "INSERT INTO trans_item_paid(company_id, hdr_id, paid_amt, trans_id, paid_sub_type_id, paid_type_id, paid_lf_id) VALUES(@CompanyId, @HdrId, @PaidAmt, @TransId, @PaidSubTypeId, @PaidTypeId, @PaidLfId);";

            Params.Clear();
            Params.Add(new MySqlField("@CompanyId", MySqlType.Int, 11, companyId));
            Params.Add(new MySqlField("@HdrId", MySqlType.Int, 11, pmtDr.SafeInteger("hdr_id")));
            Params.Add(new MySqlField("@PaidAmt", MySqlType.Decimal, 23, paidAmt));
            Params.Add(new MySqlField("@TransId", MySqlType.Int, 11, transId));
            Params.Add(new MySqlField("@PaidSubTypeId", MySqlType.Int, 11, paidDr.SafeInteger("paid_sub_type_id")));
            Params.Add(new MySqlField("@PaidTypeId", MySqlType.Int, 11, paidTypeId));
            Params.Add(new MySqlField("@PaidLfId", MySqlType.Int, 11, paidDr.SafeInteger("paid_lf_id")));

            db.ExecuteNonQuery(cn, pSql, Params);
        }
    }

    public static MySqlDataReader SQL_GetPaidPaymentForTransactionId(ref eCashDb db, ref MySqlConnection cn, ulong TransId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "SELECT id FROM loan_pmt_sched WHERE paid_ti_id = @TransId;";
        Fields.Add(new MySqlField("@TransId", MySqlType.ULong, 20, TransId));

        return db.ExecuteDataReader(ref cn, sql, false, Fields);
    }

    public static MySqlDataReader SQL_GetPaymentDue(ref eCashDb db, ref MySqlConnection cn, ulong hdrId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "SELECT id FROM loan_pmt_sched WHERE hdr_id = @hdrId AND paid_ti_id = 0;";
        Fields.Add(new MySqlField("@hdrId", MySqlType.ULong, 20, hdrId));

        return db.ExecuteDataReader(ref cn, sql, false, Fields);
    }

    public static int SQL_GetNewStatusForCancelRepo(ref eCashDb db, ref MySqlConnection cn, ulong hdrId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "SELECT IF(type_id = 4, hdr_new_status_id, hdr_old_status_id) FROM trans_item WHERE hdr_id = @hdrId AND type_id IN (4, 33) ORDER BY id DESC LIMIT 1;";
        Fields.Add(new MySqlField("@hdrId", MySqlType.ULong, 20, hdrId));

        return DataConnection_SafeScalar.ConvertTo<int>(db.ExecuteScalar(ref cn, sql, Fields));
    }

    public static int SQL_GetNewStatusForReturnRepo(ref eCashDb db, ref MySqlConnection cn, ulong hdrId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "SELECT IF(type_id = 4, hdr_new_status_id, hdr_old_status_id) FROM trans_item WHERE hdr_id = @hdrId AND type_id IN (4, 33) ORDER BY id DESC LIMIT 1;";
        Fields.Add(new MySqlField("@hdrId", MySqlType.ULong, 20, hdrId));

        return DataConnection_SafeScalar.ConvertTo<int>(db.ExecuteScalar(ref cn, sql, Fields));
    }

    public static void SQL_UpdateFeeAmount(ref eCashDb db, ref MySqlConnection cn, int transId, decimal newAmt)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "UPDATE trans_item_paid SET paid_amt = @newAmt WHERE trans_id = @transId;";
        Fields.Add(new MySqlField("@newAmt", MySqlType.Decimal, 23, newAmt));
        Fields.Add(new MySqlField("@transId", MySqlType.Int, 11, transId));
        db.ExecuteNonQuery(cn, sql, false, Fields);

        sql = "UPDATE trans_item SET amount = @newAmt WHERE id = @transId;";
        db.ExecuteNonQuery(cn, sql, false, Fields);
    }

    public static void SQL_UpdateDraw(ref eCashDb db, ref MySqlConnection cn, int drawTransId, decimal newDrawTransId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "UPDATE loan_draw SET draw_id = @newDrawTransId WHERE draw_id = @drawTransId;";
        Fields.Add(new MySqlField("@drawTransId", MySqlType.Int, 11, drawTransId));
        Fields.Add(new MySqlField("@newDrawTransId", MySqlType.Decimal, 23, newDrawTransId));

        db.ExecuteNonQuery(cn, sql, false, Fields);
    }

    public static void SQL_UpdateBankrupt(ref eCashDb db, ref MySqlConnection cn, int oldTransId, decimal newTransId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "UPDATE trans_bankrupt SET trans_id = @newTransId WHERE trans_id = @oldTransId;";
        Fields.Add(new MySqlField("@oldTransId", MySqlType.Int, 11, oldTransId));
        Fields.Add(new MySqlField("@newTransId", MySqlType.Decimal, 23, newTransId));

        db.ExecuteNonQuery(cn, sql, false, Fields);
    }

    public static void SQL_UpdateOutForRepo(ref eCashDb db, ref MySqlConnection cn, int oldTransId, decimal newTransId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "UPDATE ttl_vehicle SET out_for_repo_trans_id = @newTransId WHERE out_for_repo_trans_id = @oldTransId;";
        Fields.Add(new MySqlField("@oldTransId", MySqlType.Int, 11, oldTransId));
        Fields.Add(new MySqlField("@newTransId", MySqlType.Decimal, 23, newTransId));

        db.ExecuteNonQuery(cn, sql, false, Fields);
    }

    public static void SQL_UpdateRepossessed(ref eCashDb db, ref MySqlConnection cn, int oldTransId, decimal newTransId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "UPDATE ttl_vehicle SET repo_trans_id = @newTransId WHERE repo_trans_id = @oldTransId;";
        Fields.Add(new MySqlField("@oldTransId", MySqlType.Int, 11, oldTransId));
        Fields.Add(new MySqlField("@newTransId", MySqlType.Decimal, 23, newTransId));

        db.ExecuteNonQuery(cn, sql, false, Fields);
    }

    public static void SQL_UpdateCancelRepo(ref eCashDb db, ref MySqlConnection cn, int oldTransId, decimal newTransId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "UPDATE ttl_vehicle SET cancel_repo_trans_id = @newTransId WHERE cancel_repo_trans_id = @oldTransId;";
        Fields.Add(new MySqlField("@oldTransId", MySqlType.Int, 11, oldTransId));
        Fields.Add(new MySqlField("@newTransId", MySqlType.Decimal, 23, newTransId));

        db.ExecuteNonQuery(cn, sql, false, Fields);
    }

    public static void SQL_UpdateSold(ref eCashDb db, ref MySqlConnection cn, int oldTransId, decimal newTransId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "UPDATE ttl_vehicle SET sold_trans_id = @newTransId WHERE sold_trans_id = @oldTransId;";
        Fields.Add(new MySqlField("@oldTransId", MySqlType.Int, 11, oldTransId));
        Fields.Add(new MySqlField("@newTransId", MySqlType.Decimal, 23, newTransId));

        db.ExecuteNonQuery(cn, sql, false, Fields);
    }

    public static void SQL_UpdateClearItem(ref eCashDb db, ref MySqlConnection cn, int clearTransId, decimal newClearTransId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "UPDATE trans_pmt_ext SET clear_ti_id = @newClearTransId WHERE clear_ti_id = @clearTransId;";
        Fields.Add(new MySqlField("@clearTransId", MySqlType.Int, 11, clearTransId));
        Fields.Add(new MySqlField("@newClearTransId", MySqlType.Decimal, 23, newClearTransId));

        db.ExecuteNonQuery(cn, sql, false, Fields);
    }

    public static void SQL_MarkReallocated(ref eCashDb db, ref MySqlConnection cn, int hdrId)
    {
        string sql;
        var Fields = new ArrayList();

        sql = "UPDATE atf_reallocate SET reallocate_dt = UTC_TIMESTAMP() WHERE hdr_id = @hdrId;";
        Fields.Add(new MySqlField("@hdrId", MySqlType.Int, 11, hdrId));

        db.ExecuteNonQuery(cn, sql, false, Fields);
    }

    public static void CopyPaidEntries(ref eCashDb db, ref MySqlConnection cn, int transId, DataRow pmtDr, DataTable paidDt, int CompanyId)
    {
        var Params = new ArrayList();

        foreach (DataRow paidDr in paidDt.Select($"trans_id = {pmtDr.SafeInteger("id")}"))
        {
            string pSql = "INSERT INTO trans_item_paid(company_id, hdr_id, paid_amt, trans_id, paid_sub_type_id, paid_type_id, paid_lf_id) VALUES(@CompanyId, @HdrId, @PaidAmt, @TransId, @PaidSubTypeId, @PaidTypeId, @PaidLfId);";

            Params.Clear();
            Params.Add(new MySqlField("@CompanyId", MySqlType.Int, 11, CompanyId));
            Params.Add(new MySqlField("@HdrId", MySqlType.Int, 11, pmtDr.SafeInteger("hdr_id")));
            Params.Add(new MySqlField("@PaidAmt", MySqlType.Decimal, 23, paidDr.SafeDecimal("paid_amt")));
            Params.Add(new MySqlField("@TransId", MySqlType.Int, 11, transId));
            Params.Add(new MySqlField("@PaidSubTypeId", MySqlType.Int, 11, paidDr.SafeInteger("paid_sub_type_id")));
            Params.Add(new MySqlField("@PaidTypeId", MySqlType.Int, 11, paidDr.SafeInteger("paid_type_id")));
            Params.Add(new MySqlField("@PaidLfId", MySqlType.Int, 11, paidDr.SafeInteger("paid_lf_id")));

            db.ExecuteNonQuery(cn, pSql, Params);
        }
    }
}
